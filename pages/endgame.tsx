import type { NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from 'next-auth/react';
import { useState, useEffect } from "react";
import { TweetConfig } from "../utils/tweetHelper";
import Footer from "../components/Footer";
import FakeTweet from "fake-tweet";

function clearState() {
  localStorage.removeItem("lastScore");
  localStorage.removeItem("highScore");
  localStorage.removeItem("lastTweet");
  localStorage.removeItem("tweetData");
  localStorage.removeItem("lastTweetType");
}

const Endgame: NextPage = () => {
  const { data: session, status } = useSession();

  const [lastScore, setLastScore] = useState("0");
  const [highScore, setHighScore] = useState("0");
  const [lastTweet, setLastTweet] = useState<TweetConfig>();
  const [lastTweetType, setLastTweetType] = useState("human");

  useEffect(() => {
    function checkUserData() {
      setLastScore(localStorage.getItem("lastScore")!)
      setHighScore(localStorage.getItem("highScore")!)
      setLastTweet(JSON.parse(localStorage.getItem("lastTweet")!))
      setLastTweetType(localStorage.getItem("lastTweetType")!)
    }
    checkUserData()
  }, [])

  const tweetText = 'I was only able to guess ' + lastScore + ' Tweets correctly as real or AI-generated. How many can you get?'
  const tweetLink = 'https://AllMyFriendsAreBots.xyz'

  {/* I DO NOT KNOW WHAT I AM DOING DO NOT CRITICIZE ME */ }

  return (
    <div className="flex flex-col min-h-screen justify-between items-center">
      <Head>
        <title>AMFAB</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="self-stretch flex flex-nowrap flex-row m-5 mx-8 items-center justify-start">
        <div className="w-1/4 text-left"><button className="hover:underline" onClick={() => location.href = '/'}>Home</button></div>
        <div className="w-1/2 font-mono text-center flex flex-col flex-nowrap items-center justify-center">
          <h3>All My Friends Are Bots</h3>
        </div>
        <div className="w-1/4 flex flex-row justify-end">
          {session?.user && <>
            <button className="hover:underline" onClick={() => {
              clearState();
              signOut({ callbackUrl: "/" });
            }}>Sign out</button>
            <img src={session.user.image!} className="hidden md:inline h-10 ml-2.5 rounded-full" />
          </>}</div>
      </div>
      <div className="flex flex-col w-screen justify-center items-center">
        <h1 className='text-4xl'>Game over!</h1>
        <div className='flex flex-col justify-center text-center mt-5 items-center'>
          <div className="mx-5 bg-slate-500 text-white rounded-md w-48 px-3 py-3 text-l md:text-2xl">Your Score: {lastScore}</div>
          <div className="mx-5 bg-slate-500 text-white rounded-md w-32 mt-2 px-3 py-1.5 text-l md:text-base">High Score: {highScore}</div>
        </div>
        {(lastTweetType == "ai") && <>
          <h3 className="my-2 mx-10 w-1/2 text-base text-center">
            This Tweet was actually <b>generated by AI</b>. Imagine if the entire internet was covered with Tweets like this!
          </h3>
        </>}
        {(lastTweetType == "human") && <>
          <h3 className="my-2 mx-10 w-1/2 text-base text-center">
            This is actually <b>a real Tweet</b>! It's good to be skeptical, but an internet where we can't trust what we see isn't a very useful internet at all.
          </h3>
        </>}
        {lastTweet && <>
          <FakeTweet config={lastTweet} />
        </>}
        {!session && <div className="flex flex-col md:flex-row content-center mt-3">
          <button className="bg-slate-400 text-white text-lg rounded-md px-5 py-1.5 mx-5 my-2 hover:bg-slate-500 active:bg-slate-700 focus:outline-none focus:ring focus:ring-slate-300" onClick={() => location.href = '/pregame'}>Play Again</button>
          <button className="bg-green-500 text-white text-lg rounded-md px-5 py-1.5 mx-5 my-2 hover:bg-green-600 active:bg-green-700 focus:outline-none focus:ring focus:ring-green-300" onClick={() => {
            localStorage.removeItem("tweetData");
            clearState();
            signIn("twitter", {
              callbackUrl: `${window.location.origin}/pregame`,
            });
          }}>Sign In and Play Again</button>
          <button className="bg-sky-500 text-white text-lg rounded-md px-5 py-1.5 mx-5 my-2 hover:bg-sky-600 active:bg-sky-700 focus:outline-none focus:ring focus:ring-sky-300" onClick={() => location.href = 'https://twitter.com/intent/tweet' + `?text=${encodeURIComponent(tweetText)}` + ` ${encodeURIComponent(tweetLink)}`}>Tweet My Results</button>
        </div>}
        {!session && <h3 className="mt-2 mx-10 text-sm text-slate-500 text-center">We can't show you many Tweets unless you sign in. <br /> See how you do with Tweets from people you follow!</h3>}

        {session && <div className="flex flex-row content-center mt-3">
          <button className="bg-slate-400 text-white text-lg rounded-md px-5 py-1.5 mx-5 my-2 hover:bg-slate-500 active:bg-slate-700 focus:outline-none focus:ring focus:ring-slate-300" onClick={() => location.href = '/pregame'}>Play Again</button>
          <button className="bg-sky-500 text-white text-lg rounded-md px-5 py-1.5 mx-5 my-2 hover:bg-sky-600 active:bg-sky-700 focus:outline-none focus:ring focus:ring-sky-300" onClick={() => location.href = 'https://twitter.com/intent/tweet' + `?text=${encodeURIComponent(tweetText)}` + ` ${encodeURIComponent(tweetLink)}`}>Tweet My Results</button>
        </div>}
      </div>
      <Footer />
    </div>
  );
};

export default Endgame;
